% --- ugly internals for language definition ---
%
\makeatletter

% initialisation of user macros
\newcommand\PrologPredicateStyle{}
\newcommand\PrologVarStyle{}
\newcommand\PrologAnonymVarStyle{}
\newcommand\PrologAtomStyle{}
\newcommand\PrologOtherStyle{}
\newcommand\PrologCommentStyle{}

% useful switches (to keep track of context)
\newif\ifpredicate@prolog@
\newif\ifwithinparens@prolog@

% save definition of underscore for test
\lst@SaveOutputDef{`_}\underscore@prolog

% local variables
\newcount\currentchar@prolog

\newcommand\@testChar@prolog%
{%
    % if we're in processing mode...
    \ifnum\lst@mode=\lst@Pmode%
    \detectTypeAndHighlight@prolog%
    \else
    % ... or within parentheses
    \ifwithinparens@prolog@%
    \detectTypeAndHighlight@prolog%
    \fi
    \fi
    % Some housekeeping...
    \global\predicate@prolog@false%
}

% helper macros
\newcommand\detectTypeAndHighlight@prolog
{%
    % First, assume that we have an atom.
    \def\lst@thestyle{\PrologAtomStyle}%
    % Test whether we have a predicate and modify the style accordingly.
    \ifpredicate@prolog@%
    \def\lst@thestyle{\PrologPredicateStyle}%
    \else
    % Test whether we have a predicate and modify the style accordingly.
    \expandafter\splitfirstchar@prolog\expandafter{\the\lst@token}%
    % Check whether the identifier starts by an underscore.
    \expandafter\ifx\@testChar@prolog\underscore@prolog%
    % Check whether the identifier is '_' (anonymous variable)
    \ifnum\lst@length=1%
    \let\lst@thestyle\PrologAnonymVarStyle%
    \else
    \let\lst@thestyle\PrologVarStyle%
    \fi
    \else
    % Check whether the identifier starts by a capital letter.
    \currentchar@prolog=65
    \loop
    \expandafter\ifnum\expandafter`\@testChar@prolog=\currentchar@prolog%
    \let\lst@thestyle\PrologVarStyle%
    \let\iterate\relax
    \fi
    \advance \currentchar@prolog by 1
    \unless\ifnum\currentchar@prolog>90
    \repeat
    \fi
    \fi
}
\newcommand\splitfirstchar@prolog{}
\def\splitfirstchar@prolog#1{\@splitfirstchar@prolog#1\relax}
\newcommand\@splitfirstchar@prolog{}
\def\@splitfirstchar@prolog#1#2\relax{\def\@testChar@prolog{#1}}

% helper macro for () delimiters
\def\beginlstdelim#1#2%
{%
    \def\endlstdelim{\PrologOtherStyle #2\egroup}%
    {\PrologOtherStyle #1}%
    \global\predicate@prolog@false%
    \withinparens@prolog@true%
    \bgroup\aftergroup\endlstdelim%
}

% language name
\newcommand\lang@prolog{Prolog-pretty}
% ``normalised'' language name
\expandafter\lst@NormedDef\expandafter\normlang@prolog%
\expandafter{\lang@prolog}

% language definition
\expandafter\expandafter\expandafter\lstdefinelanguage\expandafter%
{\lang@prolog}
{%
    language            = Prolog,
    keywords            = {},      % reset all preset keywords
    showstringspaces    = false,
%    alsoletter          = (,
    alsoother           = @$,
%    moredelim           = **[is][\beginlstdelim{(}{)}]{(}{)},
    MoreSelectCharTable =
    \lst@DefSaveDef{`(}\opparen@prolog{\global\predicate@prolog@true\opparen@prolog},
}

% Hooking into listings to test each ``identifier''
\newcommand\@ddedToOutput@prolog\relax
\lst@AddToHook{Output}{\@ddedToOutput@prolog}

\lst@AddToHook{PreInit}
{%
    \ifx\lst@language\normlang@prolog%
    \let\@ddedToOutput@prolog\@testChar@prolog%
    \fi
}

\lst@AddToHook{DeInit}{\renewcommand\@ddedToOutput@prolog{}}

\makeatother
%
% --- end of ugly internals ---


% --- definition of a custom style similar to that of Pygments ---
% custom colors
\definecolor{PrologPredicate}{RGB}{000,031,255}
\definecolor{PrologVar}      {RGB}{024,021,125}
\definecolor{PrologAnonymVar}{RGB}{000,127,000}
\definecolor{PrologAtom}     {RGB}{186,032,032}
\definecolor{PrologComment}  {RGB}{063,128,127}
\definecolor{PrologOther}    {RGB}{000,000,000}

% redefinition of user macros for Prolog style
\renewcommand\PrologPredicateStyle{\color{PrologPredicate}}
\renewcommand\PrologVarStyle{\color{PrologVar}}
\renewcommand\PrologAnonymVarStyle{\color{PrologAnonymVar}}
\renewcommand\PrologAtomStyle{\color{PrologAtom}}
\renewcommand\PrologCommentStyle{\itshape\color{PrologComment}}
\renewcommand\PrologOtherStyle{\color{PrologOther}}

% custom style definition
\lstdefinestyle{Prolog-cool}
{
    language     = Prolog-pretty,
    upquote      = true,
    stringstyle  = \PrologAtomStyle,
    commentstyle = \PrologCommentStyle,
    literate     =
    {:-}{{\PrologOtherStyle :-}}2
    {,}{{\PrologOtherStyle ,}}1
    {.}{{\PrologOtherStyle .}}1
}
